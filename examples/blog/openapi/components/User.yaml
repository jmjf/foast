openapi: 3.1.0
servers:
  - url: http://127.0.0.0:3000
info: 
   title: Test API
   version: 1.0.0
   license:
      name: MIT
      identifier: MIT

components:
  # components.headers can only be used in responses
  headers:
    XTestHeader:           # this is the object name
      description: test header in response
      schema:
        type: string
  parameters:
    # use components.parameters for request headers
    XTestHeaderParam:      # this is the object name
      in: header
      name: x-test-header  # this is the name to use when sending the request
      description: test header in request
      schema:
        type: string
    UserIdParam:
      in: path
      name: userId
      schema:
        title: UserIdParam
        type: object
        properties:
          userId:
            $ref: Fields.yaml#/components/schemas/UserId
            description: A unique identifier for a user
        required: 
          -  userId
    UserQuery:
      in: query
      name: userQuery
      description: this description can be preserved in querystring
      style: simple # will not be preserved in querystring
      allowReserved: true # will not be preserved in querystring
      schema:
        title: UserQuery
        type: object
        description: this description will not be preserved
        required:
          - userId
          - userNm
        properties:
          userId:
            $ref: Fields.yaml#/components/schemas/UserId
          userNm:
            $ref: Fields.yaml#/components/schemas/UserNm
          inline:
            type: string
            minLength: 1
            description: an inline property
    ObjectQuery:
      in: query
      name: objectQuery
      description: >
        This query parameter is based on an object schema. The goal is for it to be flattened,
        not treated as an object in the query parameters in RouteOptions.


        This query and AllOfQuery deal with cases where query parameters may need to exist as
        a separate schema so they can be used elsewhere -- for example, when saving a user's default
        query to preserve it across logins.

      schema:
        $ref: '#/components/schemas/ObjectForQuery' 
    AllOfQuery:
      in: query
      name: allOfQuery
      description: >
        a query using all of, which includes a sub-object


        This tests a case where query parameters get difficult for ref-maintaining RouteOptions.
        Original RO code generates an object parameter, which doesn't play nice with query parsing.
        
        
        The goal is to get the code to flatten the allOf or to get the code to properly flatten The
        query parameters where one is from a schema object.
      schema:
        allOf:
          - $ref: '#/components/schemas/ObjectForQuery'
          - type: object
            properties:
              s2Prop1:
                type: boolean
              s2Prop2:
                type: string
                format: date
    AllOfOneOfQuery:
      in: query
      name: allOfOneOfQuery
      description: >
        a query using all of with a nested oneOf
      schema:
        allOf:
          - type: object
            properties:
              s2Prop1:
                type: boolean
              s2Prop2:
                type: string
                format: date                
          - oneOf:
            - $ref: '#/components/schemas/ObjectForQuery'
            - $ref: Fields.yaml#/components/schemas/UserId
            - type: object
              properties:
                oneOfProp1:
                  type: string
                oneOfProp2:
                  type: number
  schemas:
    ObjectForQuery:
      type: object
      properties:
        s1Prop1:
          type: string
        s1Prop2:
          $ref: Fields.yaml#/components/schemas/GenericDt
    User:
      title: User
      type: object
      properties:
        userId:
          $ref: Fields.yaml#/components/schemas/UserId
          description: A unique identifier for a user (override)
        userNm:
          $ref: Fields.yaml#/components/schemas/UserNm
        emailAddrTx:
          $ref: Fields.yaml#/components/schemas/EmailAddrTx
        x-dashes:
          $ref: '#/components/schemas/x-dashes'
        $100ok:
          $ref: '#/components/schemas/$100ok'
        xíêó:
          $ref: '#/components/schemas/xíêó'
      required:
        - userId
        - userNm
    Users:
      title: Users
      type: array
      items:
        $ref: '#/components/schemas/User'
    x-dashes:
      title: x_dashes
      type: string
    $100ok:
      title: $100ok
      type: string
    xíêó:
      title: cuneiform
      type: number
    
  responses:
    UsersResponse:
      description: An array of users
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Users'
        application/xml:
          schema:
            title: Usersxml
            type: array
            items:
              $ref: '#/components/schemas/User'
