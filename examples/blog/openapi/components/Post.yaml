openapi: 3.1.0
servers:
  - url: http://127.0.0.0:3000
info: 
   title: Test API
   version: 1.0.0
   license:
      name: MIT
      identifier: MIT

components:
  parameters:
    PostIdParam:
      in: path
      name: postId
      schema:
        type: object
        properties:
          postId:
            $ref: Fields.yaml#/components/schemas/PostId
            description: A unique identifier for a post from parameters
        required: 
          -  postId
    PaginationPage:
      name: page
      in: query
      description: Page number to retrieve.
      required: true
      schema:
        type: integer
        default: 1
        example: 2
    PaginationLimit:
      name: limit
      in: query
      description: Number of items per page.
      schema:
        type: integer
        default: 10
        maximum: 30
        example: 15
  schemas:
    Post:
      title: Post
      type: object
      properties:
        postId:
          $ref: Fields.yaml#/components/schemas/PostId
          description: Uniquely identifies a blog post
        titleTx:
          $ref: Fields.yaml#/components/schemas/TitleTx
          default: hello
        postTx:
          $ref: Fields.yaml#/components/schemas/PostTx
        author:
          $ref: User.yaml#/components/schemas/User
        comments:
          type: 'array'
          items:
            $ref: Comment.yaml#/components/schemas/Comment
        statusCd:
          $ref: Fields.yaml#/components/schemas/PostStatus
          default: draft
        statusTs:
          $ref: Fields.yaml#/components/schemas/GenericTs
          description: The date and time when the post was put in the current status
          example: 2025-11-12T13:14:15Z
      required:
        - postId
        - titleTx
        - postTx
        - postStatus
    PostBody:
      title: PostRequestBody
      type: object
      properties:
        titleTx:
          $ref: Fields.yaml#/components/schemas/TitleTx
          default: hello
        postTx:
          $ref: Fields.yaml#/components/schemas/PostTx
        author:
          $ref: User.yaml#/components/schemas/User
          default: joe
        comments:
          type: 'array'
          items:
            $ref: Comment.yaml#/components/schemas/Comment
        statusCd:
          $ref: Fields.yaml#/components/schemas/PostStatus
          default: draft
        statusTs:
          $ref: Fields.yaml#/components/schemas/GenericTs
          description: The date and time when the post was put in the current status
          example: 2025-11-12T13:14:15Z
      required:
        - titleTx
        - postTx
        - postStatus
    PostsResponse:
      title: PostsResponse
      type: array
      items: 
        $ref: '#/components/schemas/Post'

  requestBodies:
    PetBody:
      description: A JSON object containing pet information
      # required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              petId:
                type: string
              petName:
                type: string
    PostRequestBody:
      description: post to add to the blog (from requestBodies)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostBody'
        application/xml:
          schema:
            $ref: '#/components/schemas/PostBody'
  # It's probably better to NOT use requestBodies and build them in requestBody in the operation object
  # Also Redocly's lint complains about content, even though the OpenAPI spec says it's required
